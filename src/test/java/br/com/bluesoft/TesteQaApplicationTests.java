package br.com.bluesoft;
// Generated by Selenium IDE

import static org.junit.Assert.*;
//import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertEquals;
//import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertThat;

//import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
//import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
//import org.mockito.Mock;
//import org.mockito.Mockito;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

//import com.fasterxml.jackson.annotation.JsonFormat;

import br.com.bluesoft.usuario.domain.Usuario;
import br.com.bluesoft.usuario.domain.repository.UsuarioRepository;
import br.com.bluesoft.usuario.web.controller.UsuarioController;
import br.com.bluesoft.usuario.web.form.UsuarioForm;
import br.com.bluesoft.usuario.web.view.UsuarioView;
import lombok.Data;

@Data
public class TesteQaApplicationTests {

	// Configuração do driver.
	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;
	private String pathDriver = "C:\\Selenium\\chromedriver.exe";	
	SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

	// Instanciando as classes a serem testadas.
	@Mock
	UsuarioForm usuF;
	@Mock
	UsuarioController usuControl;
	@Mock
	UsuarioView usuV;
	@Mock
	UsuarioRepository usuRepo;
	
	//instanciando usuario para teste
	String nome = "Luis Fellipe Raimundo dos santos";
	String cpf = "418.377.008-42";
	String celular = "19983475826";				
	
	public Usuario user(){		
		
		LocalDate dataNascimento = LocalDate.of(1994,10,12);
		Usuario usuario = new Usuario();
	
		usuario.setNome(nome);
		usuario.setCpf(cpf);
		usuario.setCelular(celular);		
		usuario.setDataNascimento(dataNascimento);		
	
		return usuario;
	}
	
	//Setup para o googleChrome;
	@Before
	public void setUp() {

		System.setProperty("webdriver.chrome.driver", pathDriver);
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();

	}

	@After
	public void tearDown() {
		driver.quit();
	}

	@Test
	public void cT01TestLayout() {
		// Test name: CT01TestLayout
		// ************* Teste apenas para validação do layout *************
		// 1 | open | / |
		driver.get("http://localhost:8080/");
		// Verifica a presença do label Nome Completo
		assertThat(driver.findElement(By.cssSelector(".form-group:nth-child(1) > label")).getText(),
				is("Nome completo"));
		// verifica a presença do campo de digitação nome
		{
			List<WebElement> elements = driver.findElements(By.id("nome"));
			assert (elements.size() > 0);
		}
		// verfiica a presença do label CPF
		assertThat(driver.findElement(By.cssSelector(".form-group:nth-child(2) > label")).getText(), is("CPF"));
		// verifica a presença do campo de digitação cpf
		{
			List<WebElement> elements = driver.findElements(By.id("cpf"));
			assert (elements.size() > 0);
		}
		// verifica a presença do label CPF
		assertThat(driver.findElement(By.cssSelector(".form-group:nth-child(3) > label")).getText(), is("Celular"));
		// verifica a presença do campo de digitação CPF
		{
			List<WebElement> elements = driver.findElements(By.id("celular"));
			assert (elements.size() > 0);
		}
		// verifica a presença do label DataNascimento
		assertThat(driver.findElement(By.cssSelector(".form-group:nth-child(4) > label")).getText(),
				is("Data de Nascimento"));
		// verifica a presença do campo de digitação DataNascimento
		{
			List<WebElement> elements = driver.findElements(By.id("dt-nascimento"));
			assert (elements.size() > 0);
		}
		// Verifica a presença do botão salvar
		{
			List<WebElement> elements = driver.findElements(By.id("btn-salvar"));
			assert (elements.size() > 0);
		}
		// Verifica a presença do campo de digitação de busca
		{
			List<WebElement> elements = driver.findElements(By.id("input-search"));
			assert (elements.size() > 0);
		}
		// Verifica a presença do botão buscar
		{
			List<WebElement> elements = driver.findElements(By.cssSelector(".btn:nth-child(2)"));
			assert (elements.size() > 0);
		}
		// verifica a presença da tabela de usuarios
		{
			List<WebElement> elements = driver.findElements(By.cssSelector("th:nth-child(1)"));
			assert (elements.size() > 0);
		}

		// verifica labels da tabela... nome
		assertThat(driver.findElement(By.cssSelector("th:nth-child(1)")).getText(), is("Nome"));
		// verifica labels da tabela... CPF:
		assertThat(driver.findElement(By.cssSelector("th:nth-child(2)")).getText(), is("CPF:"));
		// verifica labels da tabela... Celular:
		assertThat(driver.findElement(By.cssSelector("th:nth-child(3)")).getText(), is("Celular:"));
		// verifica labels da tabela... Data de nascimento:
		assertThat(driver.findElement(By.cssSelector("th:nth-child(4)")).getText(), is("Data de nascimento:"));

		// verifica presença do botão excluir.
		{
			List<WebElement> elements = driver.findElements(By.cssSelector(".btn-danger"));
			assert (elements.size() > 0);
		}
	}

	@Test
	public void cT02TestCadUsu(){

		// Test name: CT01TestCadUsu
		
		// abre o site
		driver.get("http://localhost:8080/");
		
		// preenche o nome
		driver.findElement(By.id("nome")).click();		
		driver.findElement(By.id("nome")).sendKeys("Luis Fellipe Raimundo Santos");
		
		// preenche CPF
		driver.findElement(By.id("cpf")).click();		
		driver.findElement(By.id("cpf")).sendKeys("418.377.008-42");
		
		// preenche celular
		driver.findElement(By.id("celular")).click();		
		driver.findElement(By.id("celular")).sendKeys("19983475826");
		
		// preenche data de nascimento
		driver.findElement(By.id("dt-nascimento")).click();		
		driver.findElement(By.id("dt-nascimento")).sendKeys("10121994");
		
		// clica no botão salvar
		driver.findElement(By.id("btn-salvar")).click();				
		
		//criando uma nova lista para comparação com o que foi passado no teste.
		List<Usuario> usuList = new ArrayList<>();		
		usuList.add(user());
		
		//Verificação de cadastro
		assertEquals(usuList, usuRepo);			

	}

	// ************* Teste de busca ************
	public void cT03TestBusca() {

		// Inserindo elemento para busca.
		driver.findElement(By.id("input-search")).click();		
		driver.findElement(By.id("input-search")).sendKeys("Luis Fellipe Raimundo dos Santos");
		
		// clica no botão de busca.
		driver.findElement(By.cssSelector(".btn:nth-child(2)")).click();		
		{
			List<WebElement> elements = driver.findElements(By.id("app"));
			assert (elements.size() > 0);
		}
	} //Não está trazendo nenhum resultado.

	//******** Teste de exclusão ************
	public void cT04TestDelete() {
		// Test name: CT03TestDelete
		
		double count = usuRepo.count();		
		// Clica no campo nome da pesquisa
		driver.findElement(By.id("input-search")).click();
		driver.findElement(By.id("input-search")).sendKeys("Luis Fellipe Raimundo dos Santos");		
		driver.findElement(By.cssSelector(".btn:nth-child(2)")).click();
		
		
		// clica no botão excluir;
		driver.findElement(By.cssSelector(".btn-danger")).click();
		
		// ****Verificação****
		assertThat(usuRepo.count(), is (count-1));			

	}

}
